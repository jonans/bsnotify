#!/usr/bin/env python3

import argparse
import asyncio
import socket
import types
import threading
import time
import os
import signal

CFG = types.SimpleNamespace(
    MCAST_ADDR="255.255.255.255",
    MCAST_PORT=2021,
    NOTIFY_INTERVAL=5,
)


def uhttp_msg(method, headers):
    out = ["{} * HTTP/1.1".format(method)]
    for k, v in headers.items():
        out.append("{}: {}".format(k, v))
    out.append("\r\n")
    return "\r\n".join(out)


def notify_msg():
    headers = {
        'HOST': "{}:{}".format(CFG.MCAST_ADDR, CFG.MCAST_PORT),
        'Server': 'Buildroot/2018.02-rc3 UPnP/1.0 ssdpd/1.8',
        'Location': CFG.PRINTER_IP,
        'NT': 'urn:bambulab-com:device:3dprinter:1',
        'USN': CFG.PRINTER_SN,
        'Cache-Control': 'max-age=1800',
        'DevModel.bambu.com': 'C11',
        'DevName.bambu.com': CFG.PRINTER_NAME,
        'DevSignal.bambu.com': '-40',
        'DevConnect.bambu.com': 'lan',
        'DevBind.bambu.com': ' free',
        'Devseclink.bambu.com': ' secure',
    }
    return uhttp_msg("NOTIFY", headers).encode()


def setup():
    parser = argparse.ArgumentParser(
        description='Notify Bambu Studio of your printer on another LAN')
    parser.add_argument("PRINTER_IP", help="Printer IP")
    parser.add_argument("PRINTER_SN",
                        help="Printer Serial Number",
                        type=str.upper)
    parser.add_argument("LOCAL_ADDRESSES", help="Comma Separated Address(es) of the local interface to broadcast from" +
                        "\nUseful for running on a server or router with multiple interfaces and broadcast domains" +
                        "\nEx:"+
                        "\n10.1.1.1"+
                        "\n10.1.1.1,10.2.1.1",
                        default=None, 
                        nargs='?')
    parser.add_argument("PRINTER_NAME",
                        help="Override generated 3DP-SER-IAL printer name with custom value",
                        default=None,
                        nargs="?")
    args = parser.parse_args()
    CFG.PRINTER_IP = args.PRINTER_IP
    CFG.PRINTER_SN = args.PRINTER_SN
    if args.PRINTER_NAME is not None:
        CFG.PRINTER_NAME = args.PRINTER_NAME
    else:
        CFG.PRINTER_NAME = "3DP-{}-{}".format(CFG.PRINTER_SN[0:3],
                                              CFG.PRINTER_SN[-3:])
    CFG.LOCAL_ADDRESSES = args.LOCAL_ADDRESSES.split(",") if args.LOCAL_ADDRESSES else [None]
    return args


async def sendloop(transport, local_addr):
    target = (CFG.MCAST_ADDR, CFG.MCAST_PORT)

    msg = notify_msg()

    while True:
        print("SSDP NOTIFY for printer {} ( {} ) sent to {} {} from address: {}".format(
            CFG.PRINTER_NAME, CFG.PRINTER_IP, CFG.MCAST_ADDR, CFG.MCAST_PORT, local_addr or "default"))
        transport.sendto(msg, target)
        await asyncio.sleep(CFG.NOTIFY_INTERVAL)


def main():
    args = setup()

    threads = list()

    try:
        for local_address in CFG.LOCAL_ADDRESSES:
            thread = threading.Thread(target=asyncio.run, args=(coroutine(local_address),))
            threads.append(thread)
            thread.start()
        while True:
            time.sleep(100)
    except KeyboardInterrupt:
        print("Stopping threads...")
        os.kill(os.getpid(), signal.SIGTERM)

async def coroutine(local_address=None):
    # report a message
    print(f'{local_address or "default"} coroutine running...', flush=True)
    # get the loop for this thread
    loop = asyncio.get_running_loop()

    local_addr_tuple = (local_address, None) if local_address else None
    connect = loop.create_datagram_endpoint(asyncio.DatagramProtocol,
                                            family=socket.AF_INET,
                                            allow_broadcast=True,
                                            local_addr=local_addr_tuple)

    transport, protocol = await connect

    await sendloop(transport, local_address)

    transport.close()
    loop.close()

if __name__ == "__main__":
    main()
